/* 
 * PED Test API
 *
 * PED Test API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ReasonCode
    /// </summary>
    [DataContract]
        public partial class ReasonCode :  IEquatable<ReasonCode>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReasonCode" /> class.
        /// </summary>
        /// <param name="reasonCodeId">reasonCodeId.</param>
        /// <param name="reasonCodeName">reasonCodeName.</param>
        /// <param name="groupId">groupId.</param>
        public ReasonCode(int? reasonCodeId = default(int?), string reasonCodeName = default(string), int? groupId = default(int?))
        {
            this.ReasonCodeId = reasonCodeId;
            this.ReasonCodeName = reasonCodeName;
            this.GroupId = groupId;
        }
        
        /// <summary>
        /// Gets or Sets ReasonCodeId
        /// </summary>
        [DataMember(Name="reasonCodeId", EmitDefaultValue=false)]
        public int? ReasonCodeId { get; set; }

        /// <summary>
        /// Gets or Sets ReasonCodeName
        /// </summary>
        [DataMember(Name="reasonCodeName", EmitDefaultValue=false)]
        public string ReasonCodeName { get; set; }

        /// <summary>
        /// Gets or Sets GroupId
        /// </summary>
        [DataMember(Name="groupId", EmitDefaultValue=false)]
        public int? GroupId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReasonCode {\n");
            sb.Append("  ReasonCodeId: ").Append(ReasonCodeId).Append("\n");
            sb.Append("  ReasonCodeName: ").Append(ReasonCodeName).Append("\n");
            sb.Append("  GroupId: ").Append(GroupId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReasonCode);
        }

        /// <summary>
        /// Returns true if ReasonCode instances are equal
        /// </summary>
        /// <param name="input">Instance of ReasonCode to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReasonCode input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ReasonCodeId == input.ReasonCodeId ||
                    (this.ReasonCodeId != null &&
                    this.ReasonCodeId.Equals(input.ReasonCodeId))
                ) && 
                (
                    this.ReasonCodeName == input.ReasonCodeName ||
                    (this.ReasonCodeName != null &&
                    this.ReasonCodeName.Equals(input.ReasonCodeName))
                ) && 
                (
                    this.GroupId == input.GroupId ||
                    (this.GroupId != null &&
                    this.GroupId.Equals(input.GroupId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ReasonCodeId != null)
                    hashCode = hashCode * 59 + this.ReasonCodeId.GetHashCode();
                if (this.ReasonCodeName != null)
                    hashCode = hashCode * 59 + this.ReasonCodeName.GetHashCode();
                if (this.GroupId != null)
                    hashCode = hashCode * 59 + this.GroupId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
