/*
 * PED Test API
 *
 * PED Test API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ReasonCode : IEquatable<ReasonCode>
    { 
        /// <summary>
        /// Gets or Sets ReasonCodeId
        /// </summary>

        [DataMember(Name="reasonCodeId")]
        public int? ReasonCodeId { get; set; }

        /// <summary>
        /// Gets or Sets ReasonCodeName
        /// </summary>

        [DataMember(Name="reasonCodeName")]
        public string ReasonCodeName { get; set; }

        /// <summary>
        /// Gets or Sets GroupId
        /// </summary>

        [DataMember(Name="groupId")]
        public int? GroupId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReasonCode {\n");
            sb.Append("  ReasonCodeId: ").Append(ReasonCodeId).Append("\n");
            sb.Append("  ReasonCodeName: ").Append(ReasonCodeName).Append("\n");
            sb.Append("  GroupId: ").Append(GroupId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ReasonCode)obj);
        }

        /// <summary>
        /// Returns true if ReasonCode instances are equal
        /// </summary>
        /// <param name="other">Instance of ReasonCode to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReasonCode other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ReasonCodeId == other.ReasonCodeId ||
                    ReasonCodeId != null &&
                    ReasonCodeId.Equals(other.ReasonCodeId)
                ) && 
                (
                    ReasonCodeName == other.ReasonCodeName ||
                    ReasonCodeName != null &&
                    ReasonCodeName.Equals(other.ReasonCodeName)
                ) && 
                (
                    GroupId == other.GroupId ||
                    GroupId != null &&
                    GroupId.Equals(other.GroupId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ReasonCodeId != null)
                    hashCode = hashCode * 59 + ReasonCodeId.GetHashCode();
                    if (ReasonCodeName != null)
                    hashCode = hashCode * 59 + ReasonCodeName.GetHashCode();
                    if (GroupId != null)
                    hashCode = hashCode * 59 + GroupId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ReasonCode left, ReasonCode right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ReasonCode left, ReasonCode right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
